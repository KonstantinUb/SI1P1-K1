		N = 1
		A = 2
		B = 3
		C = 4
		END = 5
		J = 6
		T = 7

		A_START = 100	; Pocetne adr. nizova (razmaci od 100 su bezbedni)
		B_START = 200
		C_START = 300

		ORG 8

		MOV A, #A_START
		MOV B, #B_START
		MOV C, #C_START

		IN N
		IN (A), N
		IN (B), N
		IN (C), N

		ADD END, A, N
		MOV J, 0		; J je indeks koji pomaze pri izbacivanju iz nizova

petlja:	BEQ A, END, kraj	; Izlaz iz petlje, A je doslo do kraja niza
		JSR trougao
		JSR izbaci
		ADD A, A, 1
		ADD B, B, 1
		ADD C, C, 1
		BEQ N, N, petlja	; Bezuslovni skok

kraj:	MOV N, J			; Nizovi su skraceni, u J se nalazi nova duzina

		MOV A, #A_START		; Vraca adrese na pocetke nizova
		MOV B, #B_START
		MOV C, #C_START
		OUT (A), N
		OUT (B), N
		OUT (C), N

		STOP

	;;; Potprogrami ;;;

trougao:ADD T, (A), (B)		; T je zbir dveju stranica
		BGT T, (C), jeste	; Ako je zbir bilo koje 2 veci od trece, trougao = 1
		ADD T, (B), (C)
		BGT T, (A), jeste
		ADD T, (A), (C)
		BGT T, (B), jeste

		MOV T, 0			; T se sad koristi za cuvanje rezultata; trougao = 0
		RTS
jeste:  MOV T, 1
		RTS

izbaci:	ADD N, #A_START, J	; Racuna se adresa J. elementa za svaki niz
		MOV (N), (A)		; (A), (B), (C) se prepisuju na J. mesto
		ADD N, #B_START, J	; Zbog ustede memorije adresa se cuva u N
		MOV (N), (B)
		ADD N, #C_START, J
		MOV (N), (C)
		BEQ T, 0, preskok	; Nije trougao, J se ne pomera (elem. biva izbacen)
		ADD J, J, 1			; Jeste trougao, J se pomera (elem. ostaje u nizu)
preskok:RTS
